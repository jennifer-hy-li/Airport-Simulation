package lijenniferairport;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.LinkedList;
import java.util.Queue;
import javax.swing.Timer;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.NoSuchElementException;

/**
 *Simulates the processing of a airport control tower(landing flights and flights taking off)
 * @author jenniferli
 */
public class AiportGUI extends javax.swing.JFrame {

    //Queues for flight numbers of planes landing and taking off
    public static Queue<Integer> landing = new LinkedList<Integer>();
    public static Queue<Integer> takeOff = new LinkedList<Integer>();

    int count = 4;//measures the intervals of time(4 units for arrivals, 2 for takeoffs)
    int arrivingFlightCount = 0;//counts the rounds of arrivals processed(2 arrivals for every 1 takeOff)

    /**
     * create a timer listener class that does an action after a specified interval
     * the action in this case is processing a landing flight or take Off flight
     */
    private class TimerListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            //if the landing queue has flights to process, 
            //and 2 arriving flights haven't already been processed do the following
            if (!landing.isEmpty() && arrivingFlightCount < 2) {
                //process the next arriving flight
                landing(count);
            } else if (!takeOff.isEmpty()) {//if the takeOff queue has flights to process do the following
                //process the takeoff flights
                takeOff(count);
            }
        }
    }
    //create a timer object with 600miliseconds as an interval
    Timer t = new Timer(600, new TimerListener());
    /**
     * Creates new form AiportGUI
     */
    public AiportGUI() {
        initComponents();
        //set the error checking label to not visible
        invalidLabel.setVisible(false);
        //read the arriving/takeOff flight files and load it into the queues
        readFiles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        timerLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        arrivalInput = new javax.swing.JTextField();
        takeoffsInput = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        arrivalField = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        takeOffField = new javax.swing.JTextArea();
        invalidLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Airport Simulator");

        timerLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        timerLabel.setText("Press 'START' to begin simulation.");

        jLabel3.setText("Arrivals");

        jLabel4.setText("Takeoffs");

        arrivalInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arrivalInputActionPerformed(evt);
            }
        });

        takeoffsInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeoffsInputActionPerformed(evt);
            }
        });

        jLabel5.setText("Takeoff flight:");

        jLabel6.setText("Arriving Flight:");

        exitButton.setText("Exit:");
        exitButton.setFocusable(false);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        startButton.setText("START");
        startButton.setFocusable(false);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        arrivalField.setEditable(false);
        arrivalField.setColumns(20);
        arrivalField.setRows(5);
        arrivalField.setFocusable(false);
        jScrollPane1.setViewportView(arrivalField);

        takeOffField.setEditable(false);
        takeOffField.setColumns(20);
        takeOffField.setRows(5);
        takeOffField.setFocusable(false);
        jScrollPane2.setViewportView(takeOffField);

        invalidLabel.setText("jLabel2");
        invalidLabel.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(timerLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(startButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(arrivalInput, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addComponent(invalidLabel))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(takeoffsInput, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 71, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitButton)
                        .addGap(19, 19, 19))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(timerLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(startButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(arrivalInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(takeoffsInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton)
                    .addComponent(invalidLabel))
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Processes/count downs to the next flight set to land
     *
     * @param counter, the units of time until the flight lands
     */
    public void landing(int counter) {
        //if the countdown has reached 0, do the following
        if (count <= 0) {
            //remove the flight number from the arrivals queue 
            //and tell the user it has landed
            timerLabel.setText(landing.remove() + " has landed.");
            //update the new arrivals queue
            updateQueue(landing);
            //add 1 to the rounds of arrivals processed
            arrivingFlightCount++;
            //if the arriving flights have already been processed twice
            //or the queue is empty do the following
            if (arrivingFlightCount == 2 || landing.isEmpty()) {
                //set the time unit intervals to 2(for processing take offs)
                count = 2;
            } else if (takeOff.isEmpty()) {//(if there's no takeOffs to process)loop throught the landings
                arrivingFlightCount = 0;//don't count how many landing flights have been processed
                count = 4;//set the next flight count to 4
            } else {//(general loop)if the next flight processed would be an arrival
                //set the time unit intervals to 4
                count = 4;
            }
        } else {//if the countdown for processing an arrival flight hasn't reached 0 yet do the following
            //let the user know which arrival flight is going to be processed next in how many units of time intervals
            timerLabel.setText("landing plane " + landing.peek() + " in " + count);
            //take one from the count(depletes every 600milliseconds until 0, when the flight is processed)
            count--;
        }
    }

    /**
     * Processes/count downs to the next flight set to take off
     *
     * @param counter, the units of time until the flight takes off
     */
    public void takeOff(int counter) {
        //if the countdown has reached 0, do the following
        if (count <= 0) {
            //remove the flight number from the takeOff queue 
            //and tell the user it has taken off
            timerLabel.setText(takeOff.remove() + " has taken off.");
            //update the new takeOff Queue
            updateQueue(takeOff);
            //if the landing queue is empty, set the count down to 2(for another takeOff flight)
            if (landing.isEmpty()) {
                count = 2;
            } else {//(general loop) set the count down to 4(for processing arriving flights)
                count = 4;
            }
            //reset the arrivingFlightCount to allow another arriving flight to be processed
            arrivingFlightCount = 0;
        } else {//if the countdown hasn't reached 0 yet do the following
            //let the user know which take off flight is going to be processed next in how many units of time intervals
            timerLabel.setText(takeOff.peek() + " taking off in  " + count);
            //take one from the count(depletes every 600milliseconds until 0, when the flight is processed)
            count--;
        }
    }

    /**
     * Starts the simulation(starts timer/flight processing)
     *
     * @param evt
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        t.start();//starts the timer
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * closes the program
     *
     * @param evt
     */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);//closes the program
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * if the inputted flight is a valid number, add it to the arrivals queue
     *
     * @param evt
     */
    private void arrivalInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arrivalInputActionPerformed
        try {//try catch, catches for invalid flight numbers
            //get the integer(flight number) that the user inputted
            int addition = Integer.parseInt(arrivalInput.getText());
            //add the flight number to the arrivals queue
            landing.add(addition);
            //clear the text field 
            arrivalInput.setText("");
            //if the arrivals queue was previosly empty set the unit timer to 4
            if (landing.size() == 1) {
                count = 4;
            }
            //update the arrival queue
            updateQueue(landing);
            //set the error label to not visible
            invalidLabel.setVisible(false);
        } catch (NumberFormatException e) {//if the inputted flight number has letters or symbols do the following
            //show the error label
            invalidLabel.setVisible(true);
            //tell the user that the flight number isn't valid and to try again
            invalidLabel.setText("Error:landing flight number with letter/symbols. Please try again");
            //clear the text field for another attempt
            arrivalInput.setText("");
        }
    }//GEN-LAST:event_arrivalInputActionPerformed

    /**
     * if the inputted flight is a valid number, add it to the takeOff queue
     *
     * @param evt
     */
    private void takeoffsInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeoffsInputActionPerformed
        try {//try catch, catches for invalid flight numbers
            //get the integer(flight number) that the user inputted
            int addition = Integer.parseInt(takeoffsInput.getText());
            //add the flight number to the takeOff queue
            takeOff.add(addition);
            //clear the text field 
            takeoffsInput.setText("");
            //update the takeOff queue
            updateQueue(takeOff);
            //set the error label to not visible
            invalidLabel.setVisible(false);
            //if the takeOff queue was previosly empty set the unit timer to 2
            if (takeOff.size() == 1) {
                count = 2;
            }
        } catch (NumberFormatException e) {//if the inputted flight number has letters or symbols do the following
            //show the error label
            invalidLabel.setVisible(true);
            //tell the user that the flight number isn't valid and to try again
            invalidLabel.setText("Error:take off flight number with letter/symbols. Please try again.");
            //clear the text field for another attempt
            arrivalInput.setText("");
        }
    }//GEN-LAST:event_takeoffsInputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AiportGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AiportGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AiportGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AiportGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AiportGUI().setVisible(true);
            }
        });
    }

    /**
     * updates the queue given
     * @param inputQueue, queue to update
     */
    public void updateQueue(Queue<Integer> inputQueue) {
        //clears the text area of the corresponding queue
        if (inputQueue == landing) {
            arrivalField.setText("");
        } else {
            takeOffField.setText("");
        }
        String display = "";//the new flights that will be displayed
        //backup queue to keep the original queue filled
        Queue<Integer> backupQueue = new LinkedList<Integer>();
        
        //repeat while the queue still has items do the following
        while (!inputQueue.isEmpty()) {
            //take the next item off the origianl queue list
            int next = (int) inputQueue.remove();
            //add it to the backup queue
            backupQueue.add(next);
            //take the value that was just removed and add it to the output
            display += String.valueOf(next) + "\n";
        }
        //while the backUp queue still has items do the following
        while (!backupQueue.isEmpty()) {
            //add the backup queue items back to the original queue
            inputQueue.add(backupQueue.remove());
        }
        
        //if the queue being updated is arrivals do the following
        if (inputQueue == landing) {
            //change the arrival text area
            arrivalField.setText(display);
        } else {//if the queue being updated is takeOffs do the follwoing
            //change the take offs text area
            takeOffField.setText(display);
        }
    }

    /**
     * read the arrival/takeOff files and input it to the queues/text areas
     */
    public void readFiles() {
        //create new file objects for the takeOff and arrivals file
        File arrivalsFile = new File("arrivals.txt");
        File takeoffFile = new File("takeoffs.txt");

        try {//as long as the files exist try to do the following
            //create scanners that will read the files
            Scanner AfileReader = new Scanner(arrivalsFile);
            Scanner TOfileReader = new Scanner(takeoffFile);
            //read each line of the arrivals file
            while (AfileReader.hasNextLine()) {
                //add each line(flight) to the landing Queue
                landing.add(Integer.parseInt(AfileReader.nextLine()));
            }
            //read each line of the takeOff file
            while (TOfileReader.hasNextLine()) {
                //add each line(flight) to the arrivals Queue
                takeOff.add(Integer.parseInt(TOfileReader.nextLine()));
            }
        } catch (FileNotFoundException e) {//if the files dont exist let the user know
            System.out.println("arrivals/takeoff files not found");
        }
        //update the text areas based on the newly filled arrivals/takeoff queues
        updateQueue(landing);
        updateQueue(takeOff);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea arrivalField;
    private javax.swing.JTextField arrivalInput;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel invalidLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton startButton;
    private javax.swing.JTextArea takeOffField;
    private javax.swing.JTextField takeoffsInput;
    private javax.swing.JLabel timerLabel;
    // End of variables declaration//GEN-END:variables
}
